#BFS

from typing import List
from collections import deque
class Solution:
	def isCycle(self, V: int, adj: List[List[int]]) -> bool:
	    	#Code here
		visited = [False]*V
		for i in range(V):
		    if visited[i] == False:
		        if self.bfsCycle(adj, i, visited):
		            return True
		return False
	def bfsCycle(self, adj, u, visited):
	    q = deque()
	    q.append([u, -1])
	    visited[u] = True
	    while q:
	        s = q.popleft()
	        cur = s[0]
	        parent = s[1]
	        for u in adj[cur]:
	            if visited[u] == False:
	                q.append([u, cur])
	                visited[u] = True
	            elif visited[u] == True and u != parent:
	                return True
	    return False
	           